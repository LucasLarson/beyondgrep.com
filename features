#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;

use JSON::PP;
use File::Slurp;
use List::MoreUtils qw( uniq );
use Template;

# Active columns defined in template
my @TOOLS = qw( ack ag git gnu rg  );
my %TOOLS = map { $_ => 1 } @TOOLS;

# Additional tool values collected, valid, but to be ignored ...
# TODO: ... until refactor to render Grep-variant-suffixes in grep column
my @grep_variants = qw( bsd freebsd netbsd osx posix );
@TOOLS{@grep_variants} = ((0) x scalar @grep_variants);

my $json_text = File::Slurp::read_file( 'features.json' );

my $sections = JSON::PP->new->utf8->decode($json_text);

for my $section ( @{$sections} ) {
    my $heading = $section->{heading};
    my $abilities = $section->{abilities};

    for my $ability ( @{$abilities} ) {
        my %flags_by_tool;
        while ( my ($key,$value) = each %{$ability->{how}} ) {
            for my $tool ( split( /\s*,\s*/, $key ) ) {
                defined($TOOLS{$tool}) or die "Invalid tool '$tool' in key '$key'";
                if ( $TOOLS{$tool} ) {
                    $flags_by_tool{$tool} = $value;
                }
            }
        }

        if ( !%flags_by_tool ) {
            $ability->{how} = undef;
            next;
        }

        my @distinct_flags = uniq values %flags_by_tool;

        my @new_hows = map { $flags_by_tool{$_} // '' } @TOOLS;
        $ability->{how} = \@new_hows;
    }
}


my $vars = {
    sections => $sections,
};

my %tt_settings = (
    INCLUDE_PATH => [ qw( . tt tt/wrapper ) ],
);

my $tt = Template->new( \%tt_settings );
$tt->process( 'features.ttml', $vars ) or die $tt->error;
